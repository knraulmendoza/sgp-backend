// <auto-generated />
using System;
using Infraestructura.Utils;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infraestructura.Migrations
{
    [DbContext(typeof(SgpContext))]
    [Migration("20191106215011_Inicial")]
    partial class Inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099");

            modelBuilder.Entity("Dominio.Entities.Actividad", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActividadState");

                    b.Property<string>("Codigo");

                    b.Property<float>("Costo");

                    b.Property<string>("Descripcion");

                    b.Property<DateTime>("FechaFinalizacion");

                    b.Property<DateTime>("FechaInicio");

                    b.Property<string>("Nombre");

                    b.Property<long?>("ProyectoId");

                    b.HasKey("Id");

                    b.HasIndex("ProyectoId");

                    b.ToTable("Actividades");
                });

            modelBuilder.Entity("Dominio.Entities.Beneficiario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Codigo");

                    b.Property<string>("Nombre");

                    b.Property<long?>("PropuestaId");

                    b.Property<long?>("ProyectoId");

                    b.HasKey("Id");

                    b.HasIndex("PropuestaId");

                    b.HasIndex("ProyectoId");

                    b.ToTable("Beneficiarios");
                });

            modelBuilder.Entity("Dominio.Entities.Componente", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion");

                    b.Property<long?>("DimensionId");

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.HasIndex("DimensionId");

                    b.ToTable("Componente");
                });

            modelBuilder.Entity("Dominio.Entities.Compromiso", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ConvenioId");

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.HasIndex("ConvenioId");

                    b.ToTable("Compromiso");
                });

            modelBuilder.Entity("Dominio.Entities.Comunidad", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion");

                    b.Property<string>("Nombre");

                    b.Property<long?>("ProyectoId");

                    b.HasKey("Id");

                    b.HasIndex("ProyectoId");

                    b.ToTable("Comunidad");
                });

            modelBuilder.Entity("Dominio.Entities.Convenio", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Codigo");

                    b.Property<DateTime>("FechaDeSuscripcion");

                    b.Property<string>("Obbjeto");

                    b.Property<short>("Plazo");

                    b.Property<float>("Valor");

                    b.HasKey("Id");

                    b.ToTable("Convenio");
                });

            modelBuilder.Entity("Dominio.Entities.Dimension", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion");

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Dimension");
                });

            modelBuilder.Entity("Dominio.Entities.Documento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre");

                    b.Property<string>("RespaldoFisicoDigitalizado");

                    b.HasKey("Id");

                    b.ToTable("Documento");
                });

            modelBuilder.Entity("Dominio.Entities.DocumentoPresupuestal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Codigo");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<DateTime>("FechaDeExpedicion");

                    b.HasKey("Id");

                    b.ToTable("DocumentoPresupuestal");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DocumentoPresupuestal");
                });

            modelBuilder.Entity("Dominio.Entities.Estrategia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ComponenteId");

                    b.Property<string>("Descripcion");

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.HasIndex("ComponenteId");

                    b.ToTable("Estrategia");
                });

            modelBuilder.Entity("Dominio.Entities.IngresoOnceava", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion");

                    b.Property<DateTime>("Fecha");

                    b.Property<double>("Interes");

                    b.Property<string>("SoporteInteres");

                    b.Property<string>("SoporteValor");

                    b.Property<double>("Valor");

                    b.HasKey("Id");

                    b.ToTable("IngresoOnceava");
                });

            modelBuilder.Entity("Dominio.Entities.Programa", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion");

                    b.Property<long?>("EstrategiaId");

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.HasIndex("EstrategiaId");

                    b.ToTable("Programa");
                });

            modelBuilder.Entity("Dominio.Entities.Propuesta", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("DocumentoId");

                    b.Property<DateTime>("FechaDeAprovacion");

                    b.Property<DateTime>("FechaDePresentacion");

                    b.Property<DateTime>("FechaDeRegistro");

                    b.Property<string>("Nombre");

                    b.Property<int>("NumeroDeFamilias");

                    b.Property<double>("PresupuestoEstimado");

                    b.HasKey("Id");

                    b.HasIndex("DocumentoId");

                    b.ToTable("Propuestas");
                });

            modelBuilder.Entity("Dominio.Entities.Proyecto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("FechaCierre");

                    b.Property<DateTime>("FechaDeCierrePrevista");

                    b.Property<DateTime>("FechaEjecucion");

                    b.Property<string>("Nombre");

                    b.Property<float>("PresupuestoAprovado");

                    b.Property<float>("PresupuestoEjecutado");

                    b.Property<long?>("ProgramaId");

                    b.Property<long?>("PropuestaId");

                    b.Property<int>("ProyectoState");

                    b.HasKey("Id");

                    b.HasIndex("ProgramaId");

                    b.HasIndex("PropuestaId");

                    b.ToTable("Proyectos");
                });

            modelBuilder.Entity("Dominio.Entities.Transaccion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Fecha");

                    b.Property<float>("Monto");

                    b.Property<long?>("ProyectoId");

                    b.Property<int>("Tipo");

                    b.HasKey("Id");

                    b.HasIndex("ProyectoId");

                    b.ToTable("Transaccion");
                });

            modelBuilder.Entity("Dominio.Entities.CertificadoDeDisponibilidadPresupuestal", b =>
                {
                    b.HasBaseType("Dominio.Entities.DocumentoPresupuestal");

                    b.Property<DateTime>("FechaDeVencimiento");

                    b.Property<long?>("ProyectoId");

                    b.Property<long?>("RegistroPresupuestalId");

                    b.HasIndex("ProyectoId");

                    b.HasIndex("RegistroPresupuestalId");

                    b.ToTable("CertificadoDeDisponibilidadPresupuestal");

                    b.HasDiscriminator().HasValue("CertificadoDeDisponibilidadPresupuestal");
                });

            modelBuilder.Entity("Dominio.Entities.RegistroPresupuestal", b =>
                {
                    b.HasBaseType("Dominio.Entities.DocumentoPresupuestal");

                    b.Property<long?>("BeneficiarioId");

                    b.Property<long?>("CompromisoId");

                    b.Property<DateTime>("VigenciaFiscal");

                    b.Property<string>("identificacion");

                    b.HasIndex("BeneficiarioId");

                    b.HasIndex("CompromisoId");

                    b.ToTable("RegistroPresupuestal");

                    b.HasDiscriminator().HasValue("RegistroPresupuestal");
                });

            modelBuilder.Entity("Dominio.Entities.Actividad", b =>
                {
                    b.HasOne("Dominio.Entities.Proyecto")
                        .WithMany("Actividades")
                        .HasForeignKey("ProyectoId");
                });

            modelBuilder.Entity("Dominio.Entities.Beneficiario", b =>
                {
                    b.HasOne("Dominio.Entities.Propuesta")
                        .WithMany("Beneficiarios")
                        .HasForeignKey("PropuestaId");

                    b.HasOne("Dominio.Entities.Proyecto")
                        .WithMany("Beneficiarios")
                        .HasForeignKey("ProyectoId");
                });

            modelBuilder.Entity("Dominio.Entities.Componente", b =>
                {
                    b.HasOne("Dominio.Entities.Dimension")
                        .WithMany("Componentes")
                        .HasForeignKey("DimensionId");
                });

            modelBuilder.Entity("Dominio.Entities.Compromiso", b =>
                {
                    b.HasOne("Dominio.Entities.Convenio", "Convenio")
                        .WithMany()
                        .HasForeignKey("ConvenioId");
                });

            modelBuilder.Entity("Dominio.Entities.Comunidad", b =>
                {
                    b.HasOne("Dominio.Entities.Proyecto")
                        .WithMany("Comunidad")
                        .HasForeignKey("ProyectoId");
                });

            modelBuilder.Entity("Dominio.Entities.Estrategia", b =>
                {
                    b.HasOne("Dominio.Entities.Componente")
                        .WithMany("Estrategias")
                        .HasForeignKey("ComponenteId");
                });

            modelBuilder.Entity("Dominio.Entities.Programa", b =>
                {
                    b.HasOne("Dominio.Entities.Estrategia")
                        .WithMany("Programas")
                        .HasForeignKey("EstrategiaId");
                });

            modelBuilder.Entity("Dominio.Entities.Propuesta", b =>
                {
                    b.HasOne("Dominio.Entities.Documento", "Documento")
                        .WithMany()
                        .HasForeignKey("DocumentoId");
                });

            modelBuilder.Entity("Dominio.Entities.Proyecto", b =>
                {
                    b.HasOne("Dominio.Entities.Programa", "Programa")
                        .WithMany("Proyectos")
                        .HasForeignKey("ProgramaId");

                    b.HasOne("Dominio.Entities.Propuesta", "Propuesta")
                        .WithMany()
                        .HasForeignKey("PropuestaId");
                });

            modelBuilder.Entity("Dominio.Entities.Transaccion", b =>
                {
                    b.HasOne("Dominio.Entities.Proyecto", "Proyecto")
                        .WithMany("Transacciones")
                        .HasForeignKey("ProyectoId");
                });

            modelBuilder.Entity("Dominio.Entities.CertificadoDeDisponibilidadPresupuestal", b =>
                {
                    b.HasOne("Dominio.Entities.Proyecto")
                        .WithMany("CertificadosDeDisponibilidaPresupuestales")
                        .HasForeignKey("ProyectoId");

                    b.HasOne("Dominio.Entities.RegistroPresupuestal", "RegistroPresupuestal")
                        .WithMany()
                        .HasForeignKey("RegistroPresupuestalId");
                });

            modelBuilder.Entity("Dominio.Entities.RegistroPresupuestal", b =>
                {
                    b.HasOne("Dominio.Entities.Beneficiario", "Beneficiario")
                        .WithMany()
                        .HasForeignKey("BeneficiarioId");

                    b.HasOne("Dominio.Entities.Compromiso", "Compromiso")
                        .WithMany()
                        .HasForeignKey("CompromisoId");
                });
#pragma warning restore 612, 618
        }
    }
}
